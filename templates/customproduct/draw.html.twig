{% extends 'baseF.html.twig' %}
{% block content %}
<html>
<head>
  <meta charset="UTF-8">

  <style>
    canvas {
        background-color: white;
      border: 1px solid black;
    }
    .color {
      width: 30px;
      height: 30px;
      display: inline-block;
      margin-right: 10px;
      cursor: pointer;
    }
  </style>
</head>
<body>
<center>
<br>
  <h2>Unleash Your Creativity !</h2>
  <br>
  <canvas id="canvas" width="1000" height="600"></canvas>
  <br>
  <div id="colors">
    <div class="color" style="background-color: #000000;"></div>
    <div class="color" style="background-color: #FF0000;"></div>
    <div class="color" style="background-color: #00FF00;"></div>
    <div class="color" style="background-color: #0000FF;"></div>
  </div>
  <br>
  <button id="clearBtn">Clear</button>
  <button id="downloadBtn">Download</button>
</center>
  <script>
    // Get the canvas element and the context
    var canvas = document.getElementById('canvas');
    var ctx = canvas.getContext('2d');

    // Set the stroke color and width
    ctx.strokeStyle = '#000000';
    ctx.lineWidth = 5;

    // Create a flag to track whether the user is currently drawing
    var isDrawing = false;

    // Get the color palette element
    var colorPalette = document.getElementById('colors');

    // Add event listeners to the color palette
    colorPalette.addEventListener('click', setColor);

    // Function to set the stroke color
    function setColor(event) {
      ctx.strokeStyle = event.target.style.backgroundColor;
    }

    // Add event listeners to track the user's actions
    canvas.addEventListener('mousedown', startDrawing);
    canvas.addEventListener('mousemove', draw);
    canvas.addEventListener('mouseup', stopDrawing);

    // Function to start drawing
    function startDrawing(event) {
      isDrawing = true;
      draw(event);
    }

    // Function to stop drawing
    function stopDrawing() {
      isDrawing = false;
    }

    // Function to draw on the canvas
    function draw(event) {
      if (!isDrawing) return;

      // Get the position of the mouse on the canvas
      var x = event.offsetX;
      var y = event.offsetY;

      // Draw a line to the new position
      ctx.lineTo(x, y);
      ctx.stroke();
      ctx.beginPath();
      ctx.moveTo(x, y);
    }

    // Function to clear the canvas
    function clearCanvas() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
    }

    // Function to download the canvas as an image
    function downloadCanvas() {
      var image = canvas.toDataURL("image/png").replace("image/png", "image/octet-stream");
      var link = document.createElement('a');
      link.download = "drawing.png";
      link.href = image;
      link.click();
    }

    // Add event listeners to the buttons
    document.getElementById('clearBtn').addEventListener('click', clearCanvas);
    document.getElementById('downloadBtn').addEventListener('click', downloadCanvas);
  </script>
</body>
</html>
{% endblock %}